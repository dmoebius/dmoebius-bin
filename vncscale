#!/bin/bash
#
# vncscale - run a command in a scaled view using a local VNC server
#
#   This is similar to vncdesk (https://github.com/feklee/vncdesk)
#   but it doesn't use GTK-VNK, because it has a problem with clipboard
#   (see https://github.com/feklee/vncdesk/issues/3)
#
# Requirements:
#   - TigerVNC executables Xvnc, vncviewer and vncconfig
#   - remmina
#   - metacity
#


# defaults
GUEST_WINDOW_WIDTH=1400
GUEST_WINDOW_HEIGHT=1000
GUEST_WINDOW_NAME=vncscale
GUEST_VNCPORT=0 # 0 means default which is 5900 + $DISPLAY

usage="Usage: vncscale [options] <display> <command> [<args>...]"

help() {
  echo -e "vncscale - run a command in a scaled view using a local VNC server\n"
  echo -e "$usage\n"
  echo -e "Options:"
  echo -e "  -p<num> | --port=<num>    VNC port (default: <display>+5900)"
  echo -e "  -W<num> | --width=<num>   window width (default: ${GUEST_WINDOW_WIDTH})"
  echo -e "  -H<num> | --height=<num>  window height (default: ${GUEST_WINDOW_HEIGHT})"
  echo -e "  -n<str> | --name=<str>    window name (default: ${GUEST_WINDOW_NAME})"
  echo -e "  -h|--help                 this help\n"
  exit
}

error() {
  local msg="$1"; shift
  echo -e "\033[0;31mError: ${msg}\033[0m\n" 1>&2
  exit 1
}

# parse command line arguments
if ! options=$(getopt -n vncscale -o hW:H:n:p: -l help,width:,height:,name:,port: -- "$@") ; then exit 1; fi
eval set -- "$options"
while [ $# -gt 0 ]
do
  case "$1" in
    -h|--help) help; exit;;
    -W|--width) GUEST_WINDOW_WIDTH="$2"; shift;;
    -H|--height) GUEST_WINDOW_HEIGHT="$2"; shift;;
    -n|--name) GUEST_WINDOW_NAME="$2"; shift;;
    -p|--port) GUEST_VNCPORT="$2"; shift;;
    (--) shift; break;;
    (-*) error "unrecognized option: $1\n\n$usage";;
    (*) break;;
  esac
  shift
done

GUEST_DISPLAY=$1 ; shift
COMMAND=$1; shift

# validate arguments
[ -z "${GUEST_DISPLAY}" ] && error "<display> is missing.\n\n$usage"
[ -z "${COMMAND}" ] && error "<command> is missing.\n\n$usage"
[[ ${GUEST_DISPLAY} =~ ^[0-9]+$ ]] || error "<display> must be a number; got: ${GUEST_DISPLAY}\n\n$usage"
[[ ${GUEST_VNCPORT} =~ ^[0-9]+$ ]] || error "<port> must be a number; got: ${GUEST_VNCPORT}\n\n$usage"
[[ ${GUEST_WINDOW_WIDTH} =~ ^[0-9]+$ ]] || error "<width> must be a number; got: ${GUEST_WINDOW_WIDTH}\n\n$usage"
[[ ${GUEST_WINDOW_HEIGHT} =~ ^[0-9]+$ ]] || error "<height> must be a number; got: ${GUEST_WINDOW_HEIGHT}\n\n$usage"

[[ ${GUEST_VNCPORT} -eq 0 ]] && GUEST_VNCPORT=$((5900+${GUEST_DISPLAY}))
echo "using vnc port ${GUEST_VNCPORT}"

#COMMAND=/opt/install4j6/bin/install4j
#GUEST_DISPLAY=2
#GUEST_VNCPORT=5902
#GUEST_WINDOW_NAME=install4j


#######################################################################

lockfile="/tmp/.X${GUEST_DISPLAY}-lock"
remminafile="/tmp/${GUEST_WINDOW_NAME}-${GUEST_DISPLAY}-${GUEST_VNCPORT}.remmina"


wait_for_file() {
  local file="$1"; shift
  local wait_seconds="${1:-10}"; shift # 10 seconds as default timeout

  until test $((wait_seconds--)) -eq 0 -o -f "$file" ; do sleep 1; done

  ((++wait_seconds))
}


[ -f $lockfile ] && error "lockfile $lockfile exists.\nEither a Xvnc session is already running on display :${GUEST_DISPLAY}, or it's a stale leftover which can be removed."


Xvnc :${GUEST_DISPLAY} -SecurityTypes None -interface 127.0.0.1 -desktop "${GUEST_WINDOW_NAME}" -geometry "${GUEST_WINDOW_WIDTH}x${GUEST_WINDOW_HEIGHT}" -rfbport ${GUEST_VNCPORT} -pn -fp /usr/share/fonts/misc/,/usr/share/fonts/75dpi/,/usr/share/fonts/100dpi/,/usr/share/fonts/Type1/ &

wait_for_file $lockfile || error "Xvnc didn't start properly (file $lockfile is missing)"

pid_xvnc=$(tr -d ' ' < $lockfile)
echo "pid_xvnc=$pid_xvnc"

DISPLAY=:${GUEST_DISPLAY} vncconfig -nowin -display :${GUEST_DISPLAY} &
pid_vncconfig=$!
echo "pid_vncconfig=$pid_vncconfig"

DISPLAY=:${GUEST_DISPLAY} metacity &
pid_metacity=$!
echo "pid_metacity=$pid_metacity"

# TODO: vncviewer would be a more lightweight viewer than remmina, but cannot scale
#vncviewer :${GUEST_DISPLAY} &
#pid_vncviewer=$!
#echo "pid_vncviewer=$pid_vncviewer"

echo "[remmina]
keymap=
ssh_auth=0
quality=2
disableencryption=1
postcommand=
ssh_privatekey=
ssh_charset=
password=
group=
name=${GUEST_WINDOW_NAME}
precommand=
proxy=
ssh_username=
ssh_loopback=0
viewonly=0
colordepth=24
protocol=VNC
ssh_server=
ssh_enabled=0
username=
showcursor=0
disablepasswordstoring=1
server=localhost:${GUEST_VNCPORT}
disableclipboard=0
disableserverinput=0
window_maximize=0
viewmode=1
window_height=${GUEST_WINDOW_HEIGHT}
window_width=${GUEST_WINDOW_WIDTH}
scaler_expand=0
scale=2
" > $remminafile

remmina --connect=$remminafile &
pid_remmina=$!
echo "pid_remmina=$pid_remmina"


# execute command and block
DISPLAY=:${GUEST_DISPLAY} WIDTH=${GUEST_WINDOW_HEIGHT} HEIGHT=${GUEST_WINDOW_HEIGHT} ${COMMAND} "$@"


# command is finished; clean up...
echo "kill $pid_xvnc $pid_vncconfig $pid_metacity $pid_remmina"
kill $pid_xvnc $pid_vncconfig $pid_metacity $pid_remmina
rm $remminafile

